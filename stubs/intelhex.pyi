from array import array
from typing import BinaryIO, Literal, Optional, Sequence, TextIO, Tuple, Union, overload

from click import File

class IntelHex:
    def __init__(self, source: Optional[str] = None) -> None: ...
    @overload
    def fromfile(self, fobj: Union[str, TextIO], format: Literal["hex"]) -> None: ...
    @overload
    def fromfile(self, fobj: Union[str, BinaryIO], format: Literal["bin"]) -> None: ...

    loadfile = fromfile

    @overload
    def tofile(self, fobj: Union[str, TextIO], format: Literal["hex"]) -> None: ...
    @overload
    def tofile(self, fobj: Union[str, BinaryIO], format: Literal["bin"]) -> None: ...
    def merge(self, other: "IntelHex", overlap: str = "error") -> None: ...
    def tobinarray(
        self, start: Optional[int] = None, size: Optional[int] = None
    ) -> array[int]: ...
    def segments(self) -> Sequence[Tuple[int, int]]: ...
    def minaddr(self) -> int: ...
    def write_hex_file(self, f: Union[str, TextIO, File]) -> None: ...
    @overload
    def __getitem__(self, addr: int) -> int: ...
    @overload
    def __getitem__(self, addr: slice) -> "IntelHex": ...
    def __setitem__(self, addr16: int, word: int) -> None: ...
