from typing import Optional

class Curve:
    order: Optional[int]

NIST256p = Curve()

class SigningKey:
    @classmethod
    def generate(cls, curve: Curve) -> "SigningKey": ...
    @classmethod
    def from_secret_exponent(cls, secexp: int, curve: Curve) -> "SigningKey": ...
    @classmethod
    def from_string(cls, string: bytes, curve: Curve) -> "SigningKey": ...
    @classmethod
    def from_pem(cls, string: str) -> "SigningKey": ...
    def to_pem(self) -> bytes: ...
    def get_verifying_key(self) -> "VerifyingKey": ...
    def sign_digest(self, digest: bytes) -> bytes: ...

class VerifyingKey:
    def to_string(self) -> bytes: ...
    def to_pem(self) -> bytes: ...
